<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Mail;
use App\Models\User;
use App\Models\Corporate;
use App\Models\Linnasoft;
use App\Models\LinnasoftSubscription;
use App\Models\LinnasoftInvoice;
use App\Models\LinnasoftPayment;
use App\Models\LinnasoftSale;
use App\Mail\LinnasoftClientsInvoicesSend;
use App\Notifications\NewInvoiceSaas;
use App\Events\UserNotification;
use Response;
use PDF;

class LinnasoftClientsInvoices extends Command
{
    protected $signature = 'LinnasoftClientsInvoices:Cron';
    protected $description = 'This command will generate and send invoices to Linnasoft clients';

    public function __construct()
    {
        parent::__construct();
    }

    public function handle()
    {
        $subscriptions = LinnasoftSubscription::all();

        foreach($subscriptions as $subscription)
        {
            $is_client_active = Corporate::where('id', $subscription->client_id)->where('corp_state', 1)->first();

            if($is_client_active != null)
            {
                $deadline_day = getDay($subscription->subscription_started_at);
                $sale_config = LinnasoftSale::find(1);

                $day_to_send = ($sale_config->invoices_send_interval == null)? 0: $sale_config->invoices_send_interval;

                if($subscription->subscription_type == 'monthly')
                {
                    $last_invoice = LinnasoftInvoice::where('client_id', $subscription->client_id)
                                  ->orderBy('id', 'DESC')
                                  ->first();

                    $starting_date = ($last_invoice == null)
                                   ? $subscription->subscription_started_at
                                   : $last_invoice->invoice_date;

                    //check if invoice already exists in DB
                    $check = LinnasoftInvoice::where('client_id', $subscription->client_id)
                           ->where('invoice_date', get_deadline_date($deadline_day, $starting_date, 'monthly'))
                           ->first();

                    if($check == null && dateDiff(get_deadline_date($deadline_day, $starting_date, 'monthly'), date('Y-m-d')) <= $day_to_send)
                    {
                        /******************NUMBER GENERATED BY COUNTER**********************/
                            $check_invoice = LinnasoftInvoice::whereYear('invoice_date', date('Y'))
                                        ->get();

                            $get_last_counter = LinnasoftInvoice::whereYear('invoice_date', date('Y'))
                                            ->orderBy('id', 'DESC')
                                            ->first();

                            if($check_invoice->count() == 0) //the first row of current year ...
                            {
                                $current_counter = 99;
                                $new_counter = $current_counter+1;
                            }
                            else //
                            {
                                $current_counter = intval($get_last_counter->counter);
                                $new_counter = intval($get_last_counter->counter)+1;
                            }

                            $number = 'LS'.generate_number_from_counter($current_counter).time();
                        /******************NUMBER GENERATED BY COUNTER*********************/

                        /***********************************************************/
                            $tax = ($sale_config->tax_applied == null)? 0: $sale_config->tax_applied;
                            $total_with_tax = ($subscription->base_price + (($subscription->base_price*$tax)/100));
                            $day_to_due_date = ($sale_config->invoices_deadline_d == null)? 0: $sale_config->invoices_deadline_d;

                            $generated_invoice = new LinnasoftInvoice();
                            $generated_invoice->counter = $new_counter;
                            $generated_invoice->client_id = $subscription->client_id;
                            $generated_invoice->invoice_date = get_deadline_date($deadline_day, $starting_date, 'monthly');
                            $generated_invoice->invoice_due_date = date('Y-m-d', strtotime(get_deadline_date($deadline_day, $starting_date, 'monthly').' + '.$day_to_due_date.' day'));
                            $generated_invoice->invoice_number = $number;
                            $generated_invoice->invoice_tax = $tax;
                            $generated_invoice->invoice_total_tax_excluded = $subscription->base_price;
                            $generated_invoice->invoice_total_tax_included = $total_with_tax;
                            $generated_invoice->save();
                        /***********************************************************/

                        $receivers = User::where('corp_id', $subscription->client_id)
                                   ->where('user_role', 'user_admin')
                                   ->get();

                        foreach($receivers as $receiver)
                        {
                            $receiver->notify(new NewInvoiceSaas());

                            $notification = DB::table('notifications')
                                          ->where('notifiable_id', $receiver->id)
                                          ->orderBy('created_at', 'DESC')
                                          ->first();

                            event(new UserNotification('Nouvelle facture Linnasoft disponible dans votre espace client.', 'NewInvoiceSaas', $receiver->id, $notification->id));
                        }
                    }
                }
                elseif($subscription->subscription_type == 'yearly')
                {
                    $last_invoice = LinnasoftInvoice::where('client_id', $subscription->client_id)
                                ->orderBy('id', 'DESC')
                                ->first();

                    $starting_date = ($last_invoice == null)
                                ? $subscription->subscription_started_at
                                : $last_invoice->invoice_date;

                    //check if invoice already exists in DB
                    $check = LinnasoftInvoice::where('client_id', $subscription->client_id)
                           ->where('invoice_date', get_deadline_date($deadline_day, $starting_date, 'yearly'))
                           ->first();
                    

                    if($check == null && dateDiff(get_deadline_date($deadline_day, $starting_date, 'yearly'), date('Y-m-d')) <= $day_to_send)
                    {
                        /******************NUMBER GENERATED BY COUNTER**********************/
                            $check_invoice = LinnasoftInvoice::whereYear('invoice_date', date('Y'))
                                        ->get();

                            $get_last_counter = LinnasoftInvoice::whereYear('invoice_date', date('Y'))
                                            ->orderBy('id', 'DESC')
                                            ->first();

                            if($check_invoice->count() == 0) //the first row of current year ...
                            {
                                $current_counter = 99;
                                $new_counter = $current_counter+1;
                            }
                            else //
                            {
                                $current_counter = intval($get_last_counter->counter);
                                $new_counter = intval($get_last_counter->counter)+1;
                            }

                            $number = 'LS'.generate_number_from_counter($current_counter).time();
                        /******************NUMBER GENERATED BY COUNTER*********************/

                        $tax = ($sale_config->tax_applied == null)? 0: $sale_config->tax_applied;
                        $total_with_tax = ($subscription->base_price + (($subscription->base_price*$tax)/100));
                        $day_to_due_date = ($sale_config->invoices_deadline_d == null)? 0: $sale_config->invoices_deadline_d;

                        $generated_invoice = new LinnasoftInvoice();
                        $generated_invoice->counter = $new_counter;
                        $generated_invoice->client_id = $subscription->client_id;
                        $generated_invoice->invoice_date = get_deadline_date($deadline_day, $starting_date, 'yearly');
                        $generated_invoice->invoice_due_date = date('Y-m-d', strtotime(get_deadline_date($deadline_day, $starting_date, 'yearly').' + '.$day_to_due_date.' day'));
                        $generated_invoice->invoice_number = $number;
                        $generated_invoice->invoice_tax = $tax;
                        $generated_invoice->invoice_total_tax_excluded = $subscription->base_price;
                        $generated_invoice->invoice_total_tax_included = $total_with_tax;
                        $generated_invoice->save();

                        $receivers = User::where('corp_id', $subscription->client_id)
                                   ->where('user_role', 'user_admin')
                                   ->get();

                        foreach($receivers as $receiver)
                        {
                            $receiver->notify(new NewInvoiceSaas());

                            $notification = DB::table('notifications')
                                          ->where('notifiable_id', $receiver->id)
                                          ->orderBy('created_at', 'DESC')
                                          ->first();

                            event(new UserNotification('Nouvelle facture Linnasoft disponible dans votre espace client.', 'NewInvoiceSaas', $receiver->id, $notification->id));
                        }
                    }
                }
            }
        }

        $this->info('Facture envoyée avec succès !');
    }
}
